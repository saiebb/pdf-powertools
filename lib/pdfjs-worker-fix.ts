// إصلاح مشكلة PDF.js worker في Vite

// مسارات مختلفة للـ worker حسب البيئة
const getWorkerPaths = () => {
  // التحقق من توفر import.meta قبل الاستخدام
  // const isDev = (typeof import.meta !== 'undefined' && import.meta.env?.DEV) || false;
  const baseUrl = (typeof import.meta !== 'undefined' && import.meta.env?.BASE_URL) || '/';
  
  return {
    // CDN paths (أكثر استقراراً)
    cdn: {
      stable: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js',
      latest: 'https://unpkg.com/pdfjs-dist@5.3.31/build/pdf.worker.min.mjs'
    },
    // Local paths (للتطوير)
    local: {
      vite: `${window.location.origin}/node_modules/pdfjs-dist/build/pdf.worker.min.mjs`,
      public: `${window.location.origin}${baseUrl}pdf.worker.min.js`
    }
  };
};

// اختبار إمكانية الوصول لمسار worker
/*
const testWorkerPath = async (workerSrc: string): Promise<boolean> => {
  try {
    const response = await fetch(workerSrc, { method: 'HEAD' });
    return response.ok;
  } catch (error) {
    console.warn(`Worker path test failed for ${workerSrc}:`, error);
    return false;
  }
};
*/

// إعداد worker مع fallback
export const setupPdfJsWorkerWithFallback = async (): Promise<boolean> => {
  if (typeof window.pdfjsLib === 'undefined') {
    console.error('PDF.js not loaded');
    return false;
  }

  const paths = getWorkerPaths();
  
  // قائمة المسارات للتجربة بالترتيب
  const workerPaths = [
    paths.cdn.stable,    // الأكثر استقراراً
    paths.cdn.latest,    // الأحدث
    paths.local.public,  // محلي في public
    paths.local.vite     // محلي في node_modules
  ];

  console.log('🔧 محاولة إعداد PDF.js worker...');
  
  for (const workerSrc of workerPaths) {
    try {
      console.log(`🧪 اختبار worker path: ${workerSrc}`);
      
      // تعيين مسار worker
      window.pdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;
      
      // اختبار إنشاء مستند بسيط
      const testPdf = new Uint8Array([
        0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a,
        0x25, 0xc4, 0xe5, 0xf2, 0xe5, 0xeb, 0xa7, 0xf3, 0xa0, 0xd0, 0xc4, 0xc6, 0x0a,
        0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
        0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x4b, 0x69, 0x64, 0x73, 0x5b, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x31, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
        0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6f, 0x78, 0x5b, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5d, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
        0x78, 0x72, 0x65, 0x66, 0x0a, 0x30, 0x20, 0x34, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x34, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, 0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x34, 0x2f, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x32, 0x31, 0x39, 0x0a, 0x25, 0x25, 0x45, 0x4f, 0x46
      ]);
      
      const loadingTask = window.pdfjsLib.getDocument({ 
        data: testPdf,
        verbosity: 0 
      });
      
      const doc = await loadingTask.promise;
      await doc.destroy(); // تنظيف
      
      console.log(`✅ نجح إعداد PDF.js worker مع: ${workerSrc}`);
      return true;
      
    } catch (error: any) {
      console.warn(`❌ فشل worker path ${workerSrc}:`, error.message);
      continue;
    }
  }
  
  console.error('❌ فشل في إعداد PDF.js worker مع جميع المسارات');
  return false;
};

// إعداد مبسط للاستخدام السريع
export const quickFixPdfJsWorker = (): void => {
  if (typeof window.pdfjsLib !== 'undefined') {
    // استخدام CDN مستقر كحل سريع
    const stableWorkerUrl = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    window.pdfjsLib.GlobalWorkerOptions.workerSrc = stableWorkerUrl;
    console.log('🚀 تم تطبيق إصلاح سريع لـ PDF.js worker');
  }
};